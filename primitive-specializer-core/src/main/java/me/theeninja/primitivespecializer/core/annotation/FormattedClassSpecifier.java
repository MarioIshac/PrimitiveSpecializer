package me.theeninja.primitivespecializer.core.annotation;

import me.theeninja.primitivespecializer.core.annotation.classreplacement.FormattedClassSpecifierDefault;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Represents a mapping between a generic class and a collection of primitive-specializations of said generic class. This list
 * is generated by applying all primitive-type permutations as format arguments to {@link FormattedClassSpecifier#classNameComponents()} in order
 * to get a class name of the replacing primitive-specialization. This class name, plus the package name, makes up the
 * fully qualified name which is used to lookup the replacing class.
 */
@Retention(RetentionPolicy.SOURCE)
@Target({})
public @interface FormattedClassSpecifier {
    /**
     * Package name of the replacing class. By default, it takes on the same package as the generic class it is
     * replacing.
     */
    String packageName() default FormattedClassSpecifierDefault.PACKAGE_DEFAULT_VALUE;

    /**
     * // TODO
     */
    String[] classNameComponents() default FormattedClassSpecifierDefault.CLASS_NAME_COMPONENTS_DEFAULT_VALUE;

    PrimitiveReplacements primitiveReplacements() default @PrimitiveReplacements;
}
